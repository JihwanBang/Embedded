#include <stdio.h> 
#include <stdlib.h> 
#include <sys/mman.h> 
#include <sys/types.h> 
#include <sys/stat.h> 
#include <fcntl.h>  
#include <signal.h>    // Defines signal-handling functions (i.e. trap Ctrl-C) 
#include <unistd.h>        // close() 
#include "userLEDmmap.h" 
// Global variables 
volatile int keepgoing = 1;    // Set to 0 when Ctrl-c is pressed 
// Callback called when SIGINT is sent to the process (Ctrl-C) 
void signal_handler(int sig) { 
    printf( "\nCtrl-C pressed, cleaning up and exiting...\n" ); 
       keepgoing = 0; 
} 

 

int main(int argc, char *argv[]) { 
    volatile void *gpio0_addr, *gpio1_addr, *gpio2_addr, *gpio3_addr; 
    volatile unsigned int *gpio0_datain, *gpio1_datain, *gpio2_datain, *gpio3_datain; 
    volatile unsigned int *gpio0_setdataout_addr, *gpio1_setdataout_addr, *gpio2_setdataout_addr, *gpio3_setdataout_addr; 
    volatile unsigned int *gpio0_cleardataout_addr, *gpio1_cleardataout_addr,*gpio2_cleardataout_addr,*gpio3_cleardataout_addr; 
    volatile unsigned int *gpio0_oe, *gpio1_oe, *gpio2_oe, *gpio3_oe;
    unsigned int reg;
    // Set the signal callback for Ctrl-C 
    signal(SIGINT, signal_handler); 
    int fd = open("/dev/mem", O_RDWR); 
    
    gpio0_addr = mmap(0, GPIO_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd,  
                        GPIO0_BASE);     
    gpio1_addr = mmap(0, GPIO_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd,  
                        GPIO1_BASE); 
    gpio2_addr = mmap(0, GPIO_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd,  
                        GPIO2_BASE); 
    gpio3_addr = mmap(0, GPIO_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd,  
                        GPIO3_BASE); 

    gpio0_oe 		    = gpio0_addr + GPIO_OE;
    gpio0_datain            = gpio0_addr + GPIO_DATAIN; 
    gpio0_setdataout_addr   = gpio0_addr + GPIO_SETDATAOUT; 
    gpio0_cleardataout_addr = gpio0_addr + GPIO_CLEARDATAOUT; 
     
    gpio1_oe 		    = gpio1_addr + GPIO_OE;
    gpio1_datain            = gpio1_addr + GPIO_DATAIN; 
    gpio1_setdataout_addr   = gpio1_addr + GPIO_SETDATAOUT; 
    gpio1_cleardataout_addr = gpio1_addr + GPIO_CLEARDATAOUT;
    
    gpio2_oe                = gpio2_addr + GPIO_OE;
    gpio2_datain            = gpio2_addr + GPIO_DATAIN; 
    gpio2_setdataout_addr   = gpio2_addr + GPIO_SETDATAOUT; 
    gpio2_cleardataout_addr = gpio2_addr + GPIO_CLEARDATAOUT;
    
    gpio3_oe                = gpio3_addr + GPIO_OE;
    gpio3_datain            = gpio3_addr + GPIO_DATAIN; 
    gpio3_setdataout_addr   = gpio3_addr + GPIO_SETDATAOUT; 
    gpio3_cleardataout_addr = gpio3_addr + GPIO_CLEARDATAOUT;

    // Output Enable 
    reg = *gpio0_oe;
    reg = reg & (0xFFFFFFFF - USR0_LED);
    *gpio0_oe = reg;
    reg = *gpio1_oe;
    reg = reg & (0xFFFFFFFF- USR1_LED);
    *gpio1_oe = reg;
    reg = *gpio2_oe;
    reg = reg & (0xFFFFFFFF- USR2_LED);
    *gpio2_oe = reg;
    reg = *gpio3_oe;
    reg = reg & (0xFFFFFFFF- USR3_LED);
    *gpio3_oe = reg;
 
    if(gpio0_addr == MAP_FAILED) { 
        printf("Unable to map GPIO\n"); 
        exit(1); 
    } 
    printf("GPIO mapped to %p\n", gpio0_addr); 
    printf("GPIO SETDATAOUTADDR mapped to %p\n", gpio0_setdataout_addr); 
    printf("GPIO CLEARDATAOUT mapped to %p\n", gpio0_cleardataout_addr); 
    printf("Start copying GPIO_07 to GPIO_31\n"); 
    /*while(keepgoing) { 
        if(*gpio0_datain & GPIO_07) { 
            *gpio0_setdataout_addr=  
        } else { 
            *gpio_cleardataout_addr = GPIO_31; 
        } 
        //usleep(1); 
    } */
    while(keepgoing){
        *gpio0_setdataout_addr = USR0_LED;
	*gpio1_setdataout_addr = USR1_LED;
	*gpio2_setdataout_addr = USR2_LED;
	*gpio3_setdataout_addr = USR3_LED;
	

    }
    munmap((void *)gpio0_addr, GPIO_SIZE); 
    munmap((void *)gpio1_addr, GPIO_SIZE);
    munmap((void *)gpio2_addr, GPIO_SIZE);
    munmap((void *)gpio3_addr, GPIO_SIZE);
    close(fd); 
    return 0; 
} 

